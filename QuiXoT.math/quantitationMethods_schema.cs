//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3053
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace QuiXoT.math.qMethodsSchema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Quanmethods")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Quanmethods : global::System.Data.DataSet {
        
        private methodDataTable tablemethod;
        
        private MassTagsDataTable tableMassTags;
        
        private MassTagDataTable tableMassTag;
        
        private instrumentDataTable tableinstrument;
        
        private initialFitParamsDataTable tableinitialFitParams;
        
        private if_parameterDataTable tableif_parameter;
        
        private deltaFitParamsDataTable tabledeltaFitParams;
        
        private df_parameterDataTable tabledf_parameter;
        
        private scans_buttonDataTable tablescans_button;
        
        private peptides_buttonDataTable tablepeptides_button;
        
        private proteins_buttonDataTable tableproteins_button;
        
        private global::System.Data.DataRelation relationmethod_MassTags;
        
        private global::System.Data.DataRelation relationMassTags_MassTag;
        
        private global::System.Data.DataRelation relationmethod_instrument;
        
        private global::System.Data.DataRelation relationinstrument_initialFitParams;
        
        private global::System.Data.DataRelation relationinitialFitParams_if_parameter;
        
        private global::System.Data.DataRelation relationinstrument_deltaFitParams;
        
        private global::System.Data.DataRelation relationdeltaFitParams_df_parameter;
        
        private global::System.Data.DataRelation relationmethod_scans_button;
        
        private global::System.Data.DataRelation relationmethod_peptides_button;
        
        private global::System.Data.DataRelation relationmethod_proteins_button;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Quanmethods() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Quanmethods(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["method"] != null)) {
                    base.Tables.Add(new methodDataTable(ds.Tables["method"]));
                }
                if ((ds.Tables["MassTags"] != null)) {
                    base.Tables.Add(new MassTagsDataTable(ds.Tables["MassTags"]));
                }
                if ((ds.Tables["MassTag"] != null)) {
                    base.Tables.Add(new MassTagDataTable(ds.Tables["MassTag"]));
                }
                if ((ds.Tables["instrument"] != null)) {
                    base.Tables.Add(new instrumentDataTable(ds.Tables["instrument"]));
                }
                if ((ds.Tables["initialFitParams"] != null)) {
                    base.Tables.Add(new initialFitParamsDataTable(ds.Tables["initialFitParams"]));
                }
                if ((ds.Tables["if_parameter"] != null)) {
                    base.Tables.Add(new if_parameterDataTable(ds.Tables["if_parameter"]));
                }
                if ((ds.Tables["deltaFitParams"] != null)) {
                    base.Tables.Add(new deltaFitParamsDataTable(ds.Tables["deltaFitParams"]));
                }
                if ((ds.Tables["df_parameter"] != null)) {
                    base.Tables.Add(new df_parameterDataTable(ds.Tables["df_parameter"]));
                }
                if ((ds.Tables["scans_button"] != null)) {
                    base.Tables.Add(new scans_buttonDataTable(ds.Tables["scans_button"]));
                }
                if ((ds.Tables["peptides_button"] != null)) {
                    base.Tables.Add(new peptides_buttonDataTable(ds.Tables["peptides_button"]));
                }
                if ((ds.Tables["proteins_button"] != null)) {
                    base.Tables.Add(new proteins_buttonDataTable(ds.Tables["proteins_button"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public methodDataTable method {
            get {
                return this.tablemethod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MassTagsDataTable MassTags {
            get {
                return this.tableMassTags;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MassTagDataTable MassTag {
            get {
                return this.tableMassTag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public instrumentDataTable instrument {
            get {
                return this.tableinstrument;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public initialFitParamsDataTable initialFitParams {
            get {
                return this.tableinitialFitParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public if_parameterDataTable if_parameter {
            get {
                return this.tableif_parameter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public deltaFitParamsDataTable deltaFitParams {
            get {
                return this.tabledeltaFitParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public df_parameterDataTable df_parameter {
            get {
                return this.tabledf_parameter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scans_buttonDataTable scans_button {
            get {
                return this.tablescans_button;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public peptides_buttonDataTable peptides_button {
            get {
                return this.tablepeptides_button;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public proteins_buttonDataTable proteins_button {
            get {
                return this.tableproteins_button;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Quanmethods cln = ((Quanmethods)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["method"] != null)) {
                    base.Tables.Add(new methodDataTable(ds.Tables["method"]));
                }
                if ((ds.Tables["MassTags"] != null)) {
                    base.Tables.Add(new MassTagsDataTable(ds.Tables["MassTags"]));
                }
                if ((ds.Tables["MassTag"] != null)) {
                    base.Tables.Add(new MassTagDataTable(ds.Tables["MassTag"]));
                }
                if ((ds.Tables["instrument"] != null)) {
                    base.Tables.Add(new instrumentDataTable(ds.Tables["instrument"]));
                }
                if ((ds.Tables["initialFitParams"] != null)) {
                    base.Tables.Add(new initialFitParamsDataTable(ds.Tables["initialFitParams"]));
                }
                if ((ds.Tables["if_parameter"] != null)) {
                    base.Tables.Add(new if_parameterDataTable(ds.Tables["if_parameter"]));
                }
                if ((ds.Tables["deltaFitParams"] != null)) {
                    base.Tables.Add(new deltaFitParamsDataTable(ds.Tables["deltaFitParams"]));
                }
                if ((ds.Tables["df_parameter"] != null)) {
                    base.Tables.Add(new df_parameterDataTable(ds.Tables["df_parameter"]));
                }
                if ((ds.Tables["scans_button"] != null)) {
                    base.Tables.Add(new scans_buttonDataTable(ds.Tables["scans_button"]));
                }
                if ((ds.Tables["peptides_button"] != null)) {
                    base.Tables.Add(new peptides_buttonDataTable(ds.Tables["peptides_button"]));
                }
                if ((ds.Tables["proteins_button"] != null)) {
                    base.Tables.Add(new proteins_buttonDataTable(ds.Tables["proteins_button"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablemethod = ((methodDataTable)(base.Tables["method"]));
            if ((initTable == true)) {
                if ((this.tablemethod != null)) {
                    this.tablemethod.InitVars();
                }
            }
            this.tableMassTags = ((MassTagsDataTable)(base.Tables["MassTags"]));
            if ((initTable == true)) {
                if ((this.tableMassTags != null)) {
                    this.tableMassTags.InitVars();
                }
            }
            this.tableMassTag = ((MassTagDataTable)(base.Tables["MassTag"]));
            if ((initTable == true)) {
                if ((this.tableMassTag != null)) {
                    this.tableMassTag.InitVars();
                }
            }
            this.tableinstrument = ((instrumentDataTable)(base.Tables["instrument"]));
            if ((initTable == true)) {
                if ((this.tableinstrument != null)) {
                    this.tableinstrument.InitVars();
                }
            }
            this.tableinitialFitParams = ((initialFitParamsDataTable)(base.Tables["initialFitParams"]));
            if ((initTable == true)) {
                if ((this.tableinitialFitParams != null)) {
                    this.tableinitialFitParams.InitVars();
                }
            }
            this.tableif_parameter = ((if_parameterDataTable)(base.Tables["if_parameter"]));
            if ((initTable == true)) {
                if ((this.tableif_parameter != null)) {
                    this.tableif_parameter.InitVars();
                }
            }
            this.tabledeltaFitParams = ((deltaFitParamsDataTable)(base.Tables["deltaFitParams"]));
            if ((initTable == true)) {
                if ((this.tabledeltaFitParams != null)) {
                    this.tabledeltaFitParams.InitVars();
                }
            }
            this.tabledf_parameter = ((df_parameterDataTable)(base.Tables["df_parameter"]));
            if ((initTable == true)) {
                if ((this.tabledf_parameter != null)) {
                    this.tabledf_parameter.InitVars();
                }
            }
            this.tablescans_button = ((scans_buttonDataTable)(base.Tables["scans_button"]));
            if ((initTable == true)) {
                if ((this.tablescans_button != null)) {
                    this.tablescans_button.InitVars();
                }
            }
            this.tablepeptides_button = ((peptides_buttonDataTable)(base.Tables["peptides_button"]));
            if ((initTable == true)) {
                if ((this.tablepeptides_button != null)) {
                    this.tablepeptides_button.InitVars();
                }
            }
            this.tableproteins_button = ((proteins_buttonDataTable)(base.Tables["proteins_button"]));
            if ((initTable == true)) {
                if ((this.tableproteins_button != null)) {
                    this.tableproteins_button.InitVars();
                }
            }
            this.relationmethod_MassTags = this.Relations["method_MassTags"];
            this.relationMassTags_MassTag = this.Relations["MassTags_MassTag"];
            this.relationmethod_instrument = this.Relations["method_instrument"];
            this.relationinstrument_initialFitParams = this.Relations["instrument_initialFitParams"];
            this.relationinitialFitParams_if_parameter = this.Relations["initialFitParams_if_parameter"];
            this.relationinstrument_deltaFitParams = this.Relations["instrument_deltaFitParams"];
            this.relationdeltaFitParams_df_parameter = this.Relations["deltaFitParams_df_parameter"];
            this.relationmethod_scans_button = this.Relations["method_scans_button"];
            this.relationmethod_peptides_button = this.Relations["method_peptides_button"];
            this.relationmethod_proteins_button = this.Relations["method_proteins_button"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Quanmethods";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablemethod = new methodDataTable();
            base.Tables.Add(this.tablemethod);
            this.tableMassTags = new MassTagsDataTable();
            base.Tables.Add(this.tableMassTags);
            this.tableMassTag = new MassTagDataTable();
            base.Tables.Add(this.tableMassTag);
            this.tableinstrument = new instrumentDataTable();
            base.Tables.Add(this.tableinstrument);
            this.tableinitialFitParams = new initialFitParamsDataTable();
            base.Tables.Add(this.tableinitialFitParams);
            this.tableif_parameter = new if_parameterDataTable();
            base.Tables.Add(this.tableif_parameter);
            this.tabledeltaFitParams = new deltaFitParamsDataTable();
            base.Tables.Add(this.tabledeltaFitParams);
            this.tabledf_parameter = new df_parameterDataTable();
            base.Tables.Add(this.tabledf_parameter);
            this.tablescans_button = new scans_buttonDataTable();
            base.Tables.Add(this.tablescans_button);
            this.tablepeptides_button = new peptides_buttonDataTable();
            base.Tables.Add(this.tablepeptides_button);
            this.tableproteins_button = new proteins_buttonDataTable();
            base.Tables.Add(this.tableproteins_button);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("method_MassTags", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMassTags.method_IdColumn});
            this.tableMassTags.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MassTags_MassTag", new global::System.Data.DataColumn[] {
                        this.tableMassTags.MassTags_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMassTag.MassTags_IdColumn});
            this.tableMassTag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("method_instrument", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrument.method_IdColumn});
            this.tableinstrument.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrument_initialFitParams", new global::System.Data.DataColumn[] {
                        this.tableinstrument.instrument_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinitialFitParams.instrument_IdColumn});
            this.tableinitialFitParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("initialFitParams_if_parameter", new global::System.Data.DataColumn[] {
                        this.tableinitialFitParams.initialFitParams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableif_parameter.initialFitParams_IdColumn});
            this.tableif_parameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("instrument_deltaFitParams", new global::System.Data.DataColumn[] {
                        this.tableinstrument.instrument_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledeltaFitParams.instrument_IdColumn});
            this.tabledeltaFitParams.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("deltaFitParams_df_parameter", new global::System.Data.DataColumn[] {
                        this.tabledeltaFitParams.deltaFitParams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledf_parameter.deltaFitParams_IdColumn});
            this.tabledf_parameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("method_scans_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescans_button.method_IdColumn});
            this.tablescans_button.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("method_peptides_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepeptides_button.method_IdColumn});
            this.tablepeptides_button.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("method_proteins_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproteins_button.method_IdColumn});
            this.tableproteins_button.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationmethod_MassTags = new global::System.Data.DataRelation("method_MassTags", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMassTags.method_IdColumn}, false);
            this.relationmethod_MassTags.Nested = true;
            this.Relations.Add(this.relationmethod_MassTags);
            this.relationMassTags_MassTag = new global::System.Data.DataRelation("MassTags_MassTag", new global::System.Data.DataColumn[] {
                        this.tableMassTags.MassTags_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMassTag.MassTags_IdColumn}, false);
            this.relationMassTags_MassTag.Nested = true;
            this.Relations.Add(this.relationMassTags_MassTag);
            this.relationmethod_instrument = new global::System.Data.DataRelation("method_instrument", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinstrument.method_IdColumn}, false);
            this.relationmethod_instrument.Nested = true;
            this.Relations.Add(this.relationmethod_instrument);
            this.relationinstrument_initialFitParams = new global::System.Data.DataRelation("instrument_initialFitParams", new global::System.Data.DataColumn[] {
                        this.tableinstrument.instrument_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinitialFitParams.instrument_IdColumn}, false);
            this.relationinstrument_initialFitParams.Nested = true;
            this.Relations.Add(this.relationinstrument_initialFitParams);
            this.relationinitialFitParams_if_parameter = new global::System.Data.DataRelation("initialFitParams_if_parameter", new global::System.Data.DataColumn[] {
                        this.tableinitialFitParams.initialFitParams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableif_parameter.initialFitParams_IdColumn}, false);
            this.relationinitialFitParams_if_parameter.Nested = true;
            this.Relations.Add(this.relationinitialFitParams_if_parameter);
            this.relationinstrument_deltaFitParams = new global::System.Data.DataRelation("instrument_deltaFitParams", new global::System.Data.DataColumn[] {
                        this.tableinstrument.instrument_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledeltaFitParams.instrument_IdColumn}, false);
            this.relationinstrument_deltaFitParams.Nested = true;
            this.Relations.Add(this.relationinstrument_deltaFitParams);
            this.relationdeltaFitParams_df_parameter = new global::System.Data.DataRelation("deltaFitParams_df_parameter", new global::System.Data.DataColumn[] {
                        this.tabledeltaFitParams.deltaFitParams_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledf_parameter.deltaFitParams_IdColumn}, false);
            this.relationdeltaFitParams_df_parameter.Nested = true;
            this.Relations.Add(this.relationdeltaFitParams_df_parameter);
            this.relationmethod_scans_button = new global::System.Data.DataRelation("method_scans_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablescans_button.method_IdColumn}, false);
            this.relationmethod_scans_button.Nested = true;
            this.Relations.Add(this.relationmethod_scans_button);
            this.relationmethod_peptides_button = new global::System.Data.DataRelation("method_peptides_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepeptides_button.method_IdColumn}, false);
            this.relationmethod_peptides_button.Nested = true;
            this.Relations.Add(this.relationmethod_peptides_button);
            this.relationmethod_proteins_button = new global::System.Data.DataRelation("method_proteins_button", new global::System.Data.DataColumn[] {
                        this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproteins_button.method_IdColumn}, false);
            this.relationmethod_proteins_button.Nested = true;
            this.Relations.Add(this.relationmethod_proteins_button);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemethod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMassTags() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMassTag() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinstrument() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinitialFitParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeif_parameter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedeltaFitParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedf_parameter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescans_button() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepeptides_button() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproteins_button() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Quanmethods ds = new Quanmethods();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void methodRowChangeEventHandler(object sender, methodRowChangeEvent e);
        
        public delegate void MassTagsRowChangeEventHandler(object sender, MassTagsRowChangeEvent e);
        
        public delegate void MassTagRowChangeEventHandler(object sender, MassTagRowChangeEvent e);
        
        public delegate void instrumentRowChangeEventHandler(object sender, instrumentRowChangeEvent e);
        
        public delegate void initialFitParamsRowChangeEventHandler(object sender, initialFitParamsRowChangeEvent e);
        
        public delegate void if_parameterRowChangeEventHandler(object sender, if_parameterRowChangeEvent e);
        
        public delegate void deltaFitParamsRowChangeEventHandler(object sender, deltaFitParamsRowChangeEvent e);
        
        public delegate void df_parameterRowChangeEventHandler(object sender, df_parameterRowChangeEvent e);
        
        public delegate void scans_buttonRowChangeEventHandler(object sender, scans_buttonRowChangeEvent e);
        
        public delegate void peptides_buttonRowChangeEventHandler(object sender, peptides_buttonRowChangeEvent e);
        
        public delegate void proteins_buttonRowChangeEventHandler(object sender, proteins_buttonRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class methodDataTable : global::System.Data.TypedTableBase<methodRow> {
            
            private global::System.Data.DataColumn columnmethod_id_key;
            
            private global::System.Data.DataColumn columnmethod_id_name;
            
            private global::System.Data.DataColumn columnassociated_schema;
            
            private global::System.Data.DataColumn columnaminoacids_file;
            
            private global::System.Data.DataColumn columnexpected_results;
            
            private global::System.Data.DataColumn columnq_spectrum;
            
            private global::System.Data.DataColumn columnq_spectrum_position;
            
            private global::System.Data.DataColumn columnq_spectrum_type;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodDataTable() {
                this.TableName = "method";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal methodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected methodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_id_keyColumn {
                get {
                    return this.columnmethod_id_key;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_id_nameColumn {
                get {
                    return this.columnmethod_id_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn associated_schemaColumn {
                get {
                    return this.columnassociated_schema;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aminoacids_fileColumn {
                get {
                    return this.columnaminoacids_file;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn expected_resultsColumn {
                get {
                    return this.columnexpected_results;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn q_spectrumColumn {
                get {
                    return this.columnq_spectrum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn q_spectrum_positionColumn {
                get {
                    return this.columnq_spectrum_position;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn q_spectrum_typeColumn {
                get {
                    return this.columnq_spectrum_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow this[int index] {
                get {
                    return ((methodRow)(this.Rows[index]));
                }
            }
            
            public event methodRowChangeEventHandler methodRowChanging;
            
            public event methodRowChangeEventHandler methodRowChanged;
            
            public event methodRowChangeEventHandler methodRowDeleting;
            
            public event methodRowChangeEventHandler methodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmethodRow(methodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow AddmethodRow(string method_id_key, string method_id_name, string associated_schema, string aminoacids_file, long expected_results, string q_spectrum, string q_spectrum_position, string q_spectrum_type) {
                methodRow rowmethodRow = ((methodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        method_id_key,
                        method_id_name,
                        associated_schema,
                        aminoacids_file,
                        expected_results,
                        q_spectrum,
                        q_spectrum_position,
                        q_spectrum_type,
                        null};
                rowmethodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmethodRow);
                return rowmethodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                methodDataTable cln = ((methodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new methodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmethod_id_key = base.Columns["method_id_key"];
                this.columnmethod_id_name = base.Columns["method_id_name"];
                this.columnassociated_schema = base.Columns["associated_schema"];
                this.columnaminoacids_file = base.Columns["aminoacids_file"];
                this.columnexpected_results = base.Columns["expected_results"];
                this.columnq_spectrum = base.Columns["q_spectrum"];
                this.columnq_spectrum_position = base.Columns["q_spectrum_position"];
                this.columnq_spectrum_type = base.Columns["q_spectrum_type"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmethod_id_key = new global::System.Data.DataColumn("method_id_key", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmethod_id_key);
                this.columnmethod_id_name = new global::System.Data.DataColumn("method_id_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmethod_id_name);
                this.columnassociated_schema = new global::System.Data.DataColumn("associated_schema", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassociated_schema);
                this.columnaminoacids_file = new global::System.Data.DataColumn("aminoacids_file", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaminoacids_file);
                this.columnexpected_results = new global::System.Data.DataColumn("expected_results", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpected_results);
                this.columnq_spectrum = new global::System.Data.DataColumn("q_spectrum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnq_spectrum);
                this.columnq_spectrum_position = new global::System.Data.DataColumn("q_spectrum_position", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnq_spectrum_position);
                this.columnq_spectrum_type = new global::System.Data.DataColumn("q_spectrum_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnq_spectrum_type);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmethod_Id}, true));
                this.columnmethod_id_key.AllowDBNull = false;
                this.columnmethod_id_name.AllowDBNull = false;
                this.columnassociated_schema.AllowDBNull = false;
                this.columnaminoacids_file.AllowDBNull = false;
                this.columnexpected_results.AllowDBNull = false;
                this.columnq_spectrum.AllowDBNull = false;
                this.columnq_spectrum_position.AllowDBNull = false;
                this.columnmethod_Id.AutoIncrement = true;
                this.columnmethod_Id.AllowDBNull = false;
                this.columnmethod_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow NewmethodRow() {
                return ((methodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new methodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(methodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.methodRowChanged != null)) {
                    this.methodRowChanged(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.methodRowChanging != null)) {
                    this.methodRowChanging(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.methodRowDeleted != null)) {
                    this.methodRowDeleted(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.methodRowDeleting != null)) {
                    this.methodRowDeleting(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemethodRow(methodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "methodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MassTagsDataTable : global::System.Data.TypedTableBase<MassTagsRow> {
            
            private global::System.Data.DataColumn columnMassTags_Id;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsDataTable() {
                this.TableName = "MassTags";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MassTagsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MassTagsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MassTags_IdColumn {
                get {
                    return this.columnMassTags_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow this[int index] {
                get {
                    return ((MassTagsRow)(this.Rows[index]));
                }
            }
            
            public event MassTagsRowChangeEventHandler MassTagsRowChanging;
            
            public event MassTagsRowChangeEventHandler MassTagsRowChanged;
            
            public event MassTagsRowChangeEventHandler MassTagsRowDeleting;
            
            public event MassTagsRowChangeEventHandler MassTagsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMassTagsRow(MassTagsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow AddMassTagsRow(methodRow parentmethodRowBymethod_MassTags) {
                MassTagsRow rowMassTagsRow = ((MassTagsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentmethodRowBymethod_MassTags != null)) {
                    columnValuesArray[1] = parentmethodRowBymethod_MassTags[8];
                }
                rowMassTagsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMassTagsRow);
                return rowMassTagsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MassTagsDataTable cln = ((MassTagsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MassTagsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMassTags_Id = base.Columns["MassTags_Id"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMassTags_Id = new global::System.Data.DataColumn("MassTags_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMassTags_Id);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMassTags_Id}, true));
                this.columnMassTags_Id.AutoIncrement = true;
                this.columnMassTags_Id.AllowDBNull = false;
                this.columnMassTags_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow NewMassTagsRow() {
                return ((MassTagsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MassTagsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MassTagsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MassTagsRowChanged != null)) {
                    this.MassTagsRowChanged(this, new MassTagsRowChangeEvent(((MassTagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MassTagsRowChanging != null)) {
                    this.MassTagsRowChanging(this, new MassTagsRowChangeEvent(((MassTagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MassTagsRowDeleted != null)) {
                    this.MassTagsRowDeleted(this, new MassTagsRowChangeEvent(((MassTagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MassTagsRowDeleting != null)) {
                    this.MassTagsRowDeleting(this, new MassTagsRowChangeEvent(((MassTagsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMassTagsRow(MassTagsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MassTagsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MassTagDataTable : global::System.Data.TypedTableBase<MassTagRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnreference;
            
            private global::System.Data.DataColumn columnMass;
            
            private global::System.Data.DataColumn column_Corr_2;
            
            private global::System.Data.DataColumn column_Corr_1;
            
            private global::System.Data.DataColumn columnCorr1;
            
            private global::System.Data.DataColumn columnCorr2;
            
            private global::System.Data.DataColumn columnMassTags_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagDataTable() {
                this.TableName = "MassTag";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MassTagDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MassTagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceColumn {
                get {
                    return this.columnreference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MassColumn {
                get {
                    return this.columnMass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Corr_2Column {
                get {
                    return this.column_Corr_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Corr_1Column {
                get {
                    return this.column_Corr_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Corr1Column {
                get {
                    return this.columnCorr1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Corr2Column {
                get {
                    return this.columnCorr2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MassTags_IdColumn {
                get {
                    return this.columnMassTags_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRow this[int index] {
                get {
                    return ((MassTagRow)(this.Rows[index]));
                }
            }
            
            public event MassTagRowChangeEventHandler MassTagRowChanging;
            
            public event MassTagRowChangeEventHandler MassTagRowChanged;
            
            public event MassTagRowChangeEventHandler MassTagRowDeleting;
            
            public event MassTagRowChangeEventHandler MassTagRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMassTagRow(MassTagRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRow AddMassTagRow(string id, bool reference, double Mass, float _Corr_2, float _Corr_1, float Corr1, float Corr2, MassTagsRow parentMassTagsRowByMassTags_MassTag) {
                MassTagRow rowMassTagRow = ((MassTagRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        reference,
                        Mass,
                        _Corr_2,
                        _Corr_1,
                        Corr1,
                        Corr2,
                        null};
                if ((parentMassTagsRowByMassTags_MassTag != null)) {
                    columnValuesArray[7] = parentMassTagsRowByMassTags_MassTag[0];
                }
                rowMassTagRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMassTagRow);
                return rowMassTagRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MassTagDataTable cln = ((MassTagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MassTagDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnreference = base.Columns["reference"];
                this.columnMass = base.Columns["Mass"];
                this.column_Corr_2 = base.Columns["Corr-2"];
                this.column_Corr_1 = base.Columns["Corr-1"];
                this.columnCorr1 = base.Columns["Corr1"];
                this.columnCorr2 = base.Columns["Corr2"];
                this.columnMassTags_Id = base.Columns["MassTags_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnreference = new global::System.Data.DataColumn("reference", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnreference);
                this.columnMass = new global::System.Data.DataColumn("Mass", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMass);
                this.column_Corr_2 = new global::System.Data.DataColumn("Corr-2", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_Corr_2);
                this.column_Corr_1 = new global::System.Data.DataColumn("Corr-1", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_Corr_1);
                this.columnCorr1 = new global::System.Data.DataColumn("Corr1", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCorr1);
                this.columnCorr2 = new global::System.Data.DataColumn("Corr2", typeof(float), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCorr2);
                this.columnMassTags_Id = new global::System.Data.DataColumn("MassTags_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMassTags_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnreference.Namespace = "";
                this.columnreference.DefaultValue = ((bool)(false));
                this.columnMass.AllowDBNull = false;
                this.columnMass.Namespace = "";
                this.column_Corr_2.Namespace = "";
                this.column_Corr_1.Namespace = "";
                this.columnCorr1.Namespace = "";
                this.columnCorr2.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRow NewMassTagRow() {
                return ((MassTagRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MassTagRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MassTagRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MassTagRowChanged != null)) {
                    this.MassTagRowChanged(this, new MassTagRowChangeEvent(((MassTagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MassTagRowChanging != null)) {
                    this.MassTagRowChanging(this, new MassTagRowChangeEvent(((MassTagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MassTagRowDeleted != null)) {
                    this.MassTagRowDeleted(this, new MassTagRowChangeEvent(((MassTagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MassTagRowDeleting != null)) {
                    this.MassTagRowDeleting(this, new MassTagRowChangeEvent(((MassTagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMassTagRow(MassTagRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MassTagDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class instrumentDataTable : global::System.Data.TypedTableBase<instrumentRow> {
            
            private global::System.Data.DataColumn columninstrument_id_key;
            
            private global::System.Data.DataColumn columninstrument_id_name;
            
            private global::System.Data.DataColumn columnresolution;
            
            private global::System.Data.DataColumn columnkmax;
            
            private global::System.Data.DataColumn columninstrument_Id;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentDataTable() {
                this.TableName = "instrument";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected instrumentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrument_id_keyColumn {
                get {
                    return this.columninstrument_id_key;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrument_id_nameColumn {
                get {
                    return this.columninstrument_id_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn resolutionColumn {
                get {
                    return this.columnresolution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kmaxColumn {
                get {
                    return this.columnkmax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrument_IdColumn {
                get {
                    return this.columninstrument_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow this[int index] {
                get {
                    return ((instrumentRow)(this.Rows[index]));
                }
            }
            
            public event instrumentRowChangeEventHandler instrumentRowChanging;
            
            public event instrumentRowChangeEventHandler instrumentRowChanged;
            
            public event instrumentRowChangeEventHandler instrumentRowDeleting;
            
            public event instrumentRowChangeEventHandler instrumentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinstrumentRow(instrumentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow AddinstrumentRow(string instrument_id_key, string instrument_id_name, string resolution, long kmax, methodRow parentmethodRowBymethod_instrument) {
                instrumentRow rowinstrumentRow = ((instrumentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        instrument_id_key,
                        instrument_id_name,
                        resolution,
                        kmax,
                        null,
                        null};
                if ((parentmethodRowBymethod_instrument != null)) {
                    columnValuesArray[5] = parentmethodRowBymethod_instrument[8];
                }
                rowinstrumentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinstrumentRow);
                return rowinstrumentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                instrumentDataTable cln = ((instrumentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new instrumentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninstrument_id_key = base.Columns["instrument_id_key"];
                this.columninstrument_id_name = base.Columns["instrument_id_name"];
                this.columnresolution = base.Columns["resolution"];
                this.columnkmax = base.Columns["kmax"];
                this.columninstrument_Id = base.Columns["instrument_Id"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninstrument_id_key = new global::System.Data.DataColumn("instrument_id_key", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstrument_id_key);
                this.columninstrument_id_name = new global::System.Data.DataColumn("instrument_id_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstrument_id_name);
                this.columnresolution = new global::System.Data.DataColumn("resolution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresolution);
                this.columnkmax = new global::System.Data.DataColumn("kmax", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkmax);
                this.columninstrument_Id = new global::System.Data.DataColumn("instrument_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrument_Id);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninstrument_Id}, true));
                this.columninstrument_id_key.AllowDBNull = false;
                this.columninstrument_id_name.AllowDBNull = false;
                this.columnresolution.AllowDBNull = false;
                this.columninstrument_Id.AutoIncrement = true;
                this.columninstrument_Id.AllowDBNull = false;
                this.columninstrument_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow NewinstrumentRow() {
                return ((instrumentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new instrumentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(instrumentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.instrumentRowChanged != null)) {
                    this.instrumentRowChanged(this, new instrumentRowChangeEvent(((instrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.instrumentRowChanging != null)) {
                    this.instrumentRowChanging(this, new instrumentRowChangeEvent(((instrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.instrumentRowDeleted != null)) {
                    this.instrumentRowDeleted(this, new instrumentRowChangeEvent(((instrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.instrumentRowDeleting != null)) {
                    this.instrumentRowDeleting(this, new instrumentRowChangeEvent(((instrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinstrumentRow(instrumentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "instrumentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class initialFitParamsDataTable : global::System.Data.TypedTableBase<initialFitParamsRow> {
            
            private global::System.Data.DataColumn columninitialFitParams_Id;
            
            private global::System.Data.DataColumn columninstrument_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsDataTable() {
                this.TableName = "initialFitParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal initialFitParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected initialFitParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn initialFitParams_IdColumn {
                get {
                    return this.columninitialFitParams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrument_IdColumn {
                get {
                    return this.columninstrument_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow this[int index] {
                get {
                    return ((initialFitParamsRow)(this.Rows[index]));
                }
            }
            
            public event initialFitParamsRowChangeEventHandler initialFitParamsRowChanging;
            
            public event initialFitParamsRowChangeEventHandler initialFitParamsRowChanged;
            
            public event initialFitParamsRowChangeEventHandler initialFitParamsRowDeleting;
            
            public event initialFitParamsRowChangeEventHandler initialFitParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinitialFitParamsRow(initialFitParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow AddinitialFitParamsRow(instrumentRow parentinstrumentRowByinstrument_initialFitParams) {
                initialFitParamsRow rowinitialFitParamsRow = ((initialFitParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentinstrumentRowByinstrument_initialFitParams != null)) {
                    columnValuesArray[1] = parentinstrumentRowByinstrument_initialFitParams[4];
                }
                rowinitialFitParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinitialFitParamsRow);
                return rowinitialFitParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                initialFitParamsDataTable cln = ((initialFitParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new initialFitParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninitialFitParams_Id = base.Columns["initialFitParams_Id"];
                this.columninstrument_Id = base.Columns["instrument_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninitialFitParams_Id = new global::System.Data.DataColumn("initialFitParams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninitialFitParams_Id);
                this.columninstrument_Id = new global::System.Data.DataColumn("instrument_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrument_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninitialFitParams_Id}, true));
                this.columninitialFitParams_Id.AutoIncrement = true;
                this.columninitialFitParams_Id.AllowDBNull = false;
                this.columninitialFitParams_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow NewinitialFitParamsRow() {
                return ((initialFitParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new initialFitParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(initialFitParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.initialFitParamsRowChanged != null)) {
                    this.initialFitParamsRowChanged(this, new initialFitParamsRowChangeEvent(((initialFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.initialFitParamsRowChanging != null)) {
                    this.initialFitParamsRowChanging(this, new initialFitParamsRowChangeEvent(((initialFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.initialFitParamsRowDeleted != null)) {
                    this.initialFitParamsRowDeleted(this, new initialFitParamsRowChangeEvent(((initialFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.initialFitParamsRowDeleting != null)) {
                    this.initialFitParamsRowDeleting(this, new initialFitParamsRowChangeEvent(((initialFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinitialFitParamsRow(initialFitParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "initialFitParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class if_parameterDataTable : global::System.Data.TypedTableBase<if_parameterRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn column_string;
            
            private global::System.Data.DataColumn columninitialFitParams_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterDataTable() {
                this.TableName = "if_parameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal if_parameterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected if_parameterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _stringColumn {
                get {
                    return this.column_string;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn initialFitParams_IdColumn {
                get {
                    return this.columninitialFitParams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRow this[int index] {
                get {
                    return ((if_parameterRow)(this.Rows[index]));
                }
            }
            
            public event if_parameterRowChangeEventHandler if_parameterRowChanging;
            
            public event if_parameterRowChangeEventHandler if_parameterRowChanged;
            
            public event if_parameterRowChangeEventHandler if_parameterRowDeleting;
            
            public event if_parameterRowChangeEventHandler if_parameterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addif_parameterRow(if_parameterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRow Addif_parameterRow(string id, double value, string _string, initialFitParamsRow parentinitialFitParamsRowByinitialFitParams_if_parameter) {
                if_parameterRow rowif_parameterRow = ((if_parameterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        value,
                        _string,
                        null};
                if ((parentinitialFitParamsRowByinitialFitParams_if_parameter != null)) {
                    columnValuesArray[3] = parentinitialFitParamsRowByinitialFitParams_if_parameter[0];
                }
                rowif_parameterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowif_parameterRow);
                return rowif_parameterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                if_parameterDataTable cln = ((if_parameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new if_parameterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnvalue = base.Columns["value"];
                this.column_string = base.Columns["string"];
                this.columninitialFitParams_Id = base.Columns["initialFitParams_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvalue);
                this.column_string = new global::System.Data.DataColumn("string", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_string);
                this.columninitialFitParams_Id = new global::System.Data.DataColumn("initialFitParams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninitialFitParams_Id);
                this.columnid.Namespace = "";
                this.columnvalue.Namespace = "";
                this.column_string.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRow Newif_parameterRow() {
                return ((if_parameterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new if_parameterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(if_parameterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.if_parameterRowChanged != null)) {
                    this.if_parameterRowChanged(this, new if_parameterRowChangeEvent(((if_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.if_parameterRowChanging != null)) {
                    this.if_parameterRowChanging(this, new if_parameterRowChangeEvent(((if_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.if_parameterRowDeleted != null)) {
                    this.if_parameterRowDeleted(this, new if_parameterRowChangeEvent(((if_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.if_parameterRowDeleting != null)) {
                    this.if_parameterRowDeleting(this, new if_parameterRowChangeEvent(((if_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeif_parameterRow(if_parameterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "if_parameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class deltaFitParamsDataTable : global::System.Data.TypedTableBase<deltaFitParamsRow> {
            
            private global::System.Data.DataColumn columndeltaFitParams_Id;
            
            private global::System.Data.DataColumn columninstrument_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsDataTable() {
                this.TableName = "deltaFitParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deltaFitParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected deltaFitParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deltaFitParams_IdColumn {
                get {
                    return this.columndeltaFitParams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instrument_IdColumn {
                get {
                    return this.columninstrument_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow this[int index] {
                get {
                    return ((deltaFitParamsRow)(this.Rows[index]));
                }
            }
            
            public event deltaFitParamsRowChangeEventHandler deltaFitParamsRowChanging;
            
            public event deltaFitParamsRowChangeEventHandler deltaFitParamsRowChanged;
            
            public event deltaFitParamsRowChangeEventHandler deltaFitParamsRowDeleting;
            
            public event deltaFitParamsRowChangeEventHandler deltaFitParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddeltaFitParamsRow(deltaFitParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow AdddeltaFitParamsRow(instrumentRow parentinstrumentRowByinstrument_deltaFitParams) {
                deltaFitParamsRow rowdeltaFitParamsRow = ((deltaFitParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentinstrumentRowByinstrument_deltaFitParams != null)) {
                    columnValuesArray[1] = parentinstrumentRowByinstrument_deltaFitParams[4];
                }
                rowdeltaFitParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdeltaFitParamsRow);
                return rowdeltaFitParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                deltaFitParamsDataTable cln = ((deltaFitParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new deltaFitParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndeltaFitParams_Id = base.Columns["deltaFitParams_Id"];
                this.columninstrument_Id = base.Columns["instrument_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndeltaFitParams_Id = new global::System.Data.DataColumn("deltaFitParams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndeltaFitParams_Id);
                this.columninstrument_Id = new global::System.Data.DataColumn("instrument_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstrument_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndeltaFitParams_Id}, true));
                this.columndeltaFitParams_Id.AutoIncrement = true;
                this.columndeltaFitParams_Id.AllowDBNull = false;
                this.columndeltaFitParams_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow NewdeltaFitParamsRow() {
                return ((deltaFitParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new deltaFitParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(deltaFitParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.deltaFitParamsRowChanged != null)) {
                    this.deltaFitParamsRowChanged(this, new deltaFitParamsRowChangeEvent(((deltaFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.deltaFitParamsRowChanging != null)) {
                    this.deltaFitParamsRowChanging(this, new deltaFitParamsRowChangeEvent(((deltaFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.deltaFitParamsRowDeleted != null)) {
                    this.deltaFitParamsRowDeleted(this, new deltaFitParamsRowChangeEvent(((deltaFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.deltaFitParamsRowDeleting != null)) {
                    this.deltaFitParamsRowDeleting(this, new deltaFitParamsRowChangeEvent(((deltaFitParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedeltaFitParamsRow(deltaFitParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "deltaFitParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class df_parameterDataTable : global::System.Data.TypedTableBase<df_parameterRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn column_string;
            
            private global::System.Data.DataColumn columndeltaFitParams_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterDataTable() {
                this.TableName = "df_parameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal df_parameterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected df_parameterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _stringColumn {
                get {
                    return this.column_string;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn deltaFitParams_IdColumn {
                get {
                    return this.columndeltaFitParams_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRow this[int index] {
                get {
                    return ((df_parameterRow)(this.Rows[index]));
                }
            }
            
            public event df_parameterRowChangeEventHandler df_parameterRowChanging;
            
            public event df_parameterRowChangeEventHandler df_parameterRowChanged;
            
            public event df_parameterRowChangeEventHandler df_parameterRowDeleting;
            
            public event df_parameterRowChangeEventHandler df_parameterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddf_parameterRow(df_parameterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRow Adddf_parameterRow(string id, double value, string _string, deltaFitParamsRow parentdeltaFitParamsRowBydeltaFitParams_df_parameter) {
                df_parameterRow rowdf_parameterRow = ((df_parameterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        value,
                        _string,
                        null};
                if ((parentdeltaFitParamsRowBydeltaFitParams_df_parameter != null)) {
                    columnValuesArray[3] = parentdeltaFitParamsRowBydeltaFitParams_df_parameter[0];
                }
                rowdf_parameterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdf_parameterRow);
                return rowdf_parameterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                df_parameterDataTable cln = ((df_parameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new df_parameterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnvalue = base.Columns["value"];
                this.column_string = base.Columns["string"];
                this.columndeltaFitParams_Id = base.Columns["deltaFitParams_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvalue);
                this.column_string = new global::System.Data.DataColumn("string", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_string);
                this.columndeltaFitParams_Id = new global::System.Data.DataColumn("deltaFitParams_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndeltaFitParams_Id);
                this.columnid.Namespace = "";
                this.columnvalue.Namespace = "";
                this.column_string.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRow Newdf_parameterRow() {
                return ((df_parameterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new df_parameterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(df_parameterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.df_parameterRowChanged != null)) {
                    this.df_parameterRowChanged(this, new df_parameterRowChangeEvent(((df_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.df_parameterRowChanging != null)) {
                    this.df_parameterRowChanging(this, new df_parameterRowChangeEvent(((df_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.df_parameterRowDeleted != null)) {
                    this.df_parameterRowDeleted(this, new df_parameterRowChangeEvent(((df_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.df_parameterRowDeleting != null)) {
                    this.df_parameterRowDeleting(this, new df_parameterRowChangeEvent(((df_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedf_parameterRow(df_parameterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "df_parameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scans_buttonDataTable : global::System.Data.TypedTableBase<scans_buttonRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnrowFilter;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnhide_columns;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonDataTable() {
                this.TableName = "scans_button";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scans_buttonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scans_buttonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowFilterColumn {
                get {
                    return this.columnrowFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hide_columnsColumn {
                get {
                    return this.columnhide_columns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRow this[int index] {
                get {
                    return ((scans_buttonRow)(this.Rows[index]));
                }
            }
            
            public event scans_buttonRowChangeEventHandler scans_buttonRowChanging;
            
            public event scans_buttonRowChangeEventHandler scans_buttonRowChanged;
            
            public event scans_buttonRowChangeEventHandler scans_buttonRowDeleting;
            
            public event scans_buttonRowChangeEventHandler scans_buttonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addscans_buttonRow(scans_buttonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRow Addscans_buttonRow(string id, string rowFilter, string sort, string hide_columns, methodRow parentmethodRowBymethod_scans_button) {
                scans_buttonRow rowscans_buttonRow = ((scans_buttonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        rowFilter,
                        sort,
                        hide_columns,
                        null};
                if ((parentmethodRowBymethod_scans_button != null)) {
                    columnValuesArray[4] = parentmethodRowBymethod_scans_button[8];
                }
                rowscans_buttonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowscans_buttonRow);
                return rowscans_buttonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                scans_buttonDataTable cln = ((scans_buttonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new scans_buttonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnrowFilter = base.Columns["rowFilter"];
                this.columnsort = base.Columns["sort"];
                this.columnhide_columns = base.Columns["hide_columns"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnrowFilter = new global::System.Data.DataColumn("rowFilter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrowFilter);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsort);
                this.columnhide_columns = new global::System.Data.DataColumn("hide_columns", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhide_columns);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnrowFilter.Namespace = "";
                this.columnsort.Namespace = "";
                this.columnhide_columns.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRow Newscans_buttonRow() {
                return ((scans_buttonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new scans_buttonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(scans_buttonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scans_buttonRowChanged != null)) {
                    this.scans_buttonRowChanged(this, new scans_buttonRowChangeEvent(((scans_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scans_buttonRowChanging != null)) {
                    this.scans_buttonRowChanging(this, new scans_buttonRowChangeEvent(((scans_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scans_buttonRowDeleted != null)) {
                    this.scans_buttonRowDeleted(this, new scans_buttonRowChangeEvent(((scans_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scans_buttonRowDeleting != null)) {
                    this.scans_buttonRowDeleting(this, new scans_buttonRowChangeEvent(((scans_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removescans_buttonRow(scans_buttonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scans_buttonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class peptides_buttonDataTable : global::System.Data.TypedTableBase<peptides_buttonRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnrowFilter;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnhide_columns;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonDataTable() {
                this.TableName = "peptides_button";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal peptides_buttonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected peptides_buttonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowFilterColumn {
                get {
                    return this.columnrowFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hide_columnsColumn {
                get {
                    return this.columnhide_columns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRow this[int index] {
                get {
                    return ((peptides_buttonRow)(this.Rows[index]));
                }
            }
            
            public event peptides_buttonRowChangeEventHandler peptides_buttonRowChanging;
            
            public event peptides_buttonRowChangeEventHandler peptides_buttonRowChanged;
            
            public event peptides_buttonRowChangeEventHandler peptides_buttonRowDeleting;
            
            public event peptides_buttonRowChangeEventHandler peptides_buttonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpeptides_buttonRow(peptides_buttonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRow Addpeptides_buttonRow(string id, string rowFilter, string sort, string hide_columns, methodRow parentmethodRowBymethod_peptides_button) {
                peptides_buttonRow rowpeptides_buttonRow = ((peptides_buttonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        rowFilter,
                        sort,
                        hide_columns,
                        null};
                if ((parentmethodRowBymethod_peptides_button != null)) {
                    columnValuesArray[4] = parentmethodRowBymethod_peptides_button[8];
                }
                rowpeptides_buttonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpeptides_buttonRow);
                return rowpeptides_buttonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                peptides_buttonDataTable cln = ((peptides_buttonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new peptides_buttonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnrowFilter = base.Columns["rowFilter"];
                this.columnsort = base.Columns["sort"];
                this.columnhide_columns = base.Columns["hide_columns"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnrowFilter = new global::System.Data.DataColumn("rowFilter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrowFilter);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsort);
                this.columnhide_columns = new global::System.Data.DataColumn("hide_columns", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhide_columns);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnrowFilter.Namespace = "";
                this.columnsort.Namespace = "";
                this.columnhide_columns.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRow Newpeptides_buttonRow() {
                return ((peptides_buttonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new peptides_buttonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(peptides_buttonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.peptides_buttonRowChanged != null)) {
                    this.peptides_buttonRowChanged(this, new peptides_buttonRowChangeEvent(((peptides_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.peptides_buttonRowChanging != null)) {
                    this.peptides_buttonRowChanging(this, new peptides_buttonRowChangeEvent(((peptides_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.peptides_buttonRowDeleted != null)) {
                    this.peptides_buttonRowDeleted(this, new peptides_buttonRowChangeEvent(((peptides_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.peptides_buttonRowDeleting != null)) {
                    this.peptides_buttonRowDeleting(this, new peptides_buttonRowChangeEvent(((peptides_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepeptides_buttonRow(peptides_buttonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "peptides_buttonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class proteins_buttonDataTable : global::System.Data.TypedTableBase<proteins_buttonRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnrowFilter;
            
            private global::System.Data.DataColumn columnsort;
            
            private global::System.Data.DataColumn columnhide_columns;
            
            private global::System.Data.DataColumn columnmethod_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonDataTable() {
                this.TableName = "proteins_button";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal proteins_buttonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected proteins_buttonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowFilterColumn {
                get {
                    return this.columnrowFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sortColumn {
                get {
                    return this.columnsort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hide_columnsColumn {
                get {
                    return this.columnhide_columns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn method_IdColumn {
                get {
                    return this.columnmethod_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRow this[int index] {
                get {
                    return ((proteins_buttonRow)(this.Rows[index]));
                }
            }
            
            public event proteins_buttonRowChangeEventHandler proteins_buttonRowChanging;
            
            public event proteins_buttonRowChangeEventHandler proteins_buttonRowChanged;
            
            public event proteins_buttonRowChangeEventHandler proteins_buttonRowDeleting;
            
            public event proteins_buttonRowChangeEventHandler proteins_buttonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addproteins_buttonRow(proteins_buttonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRow Addproteins_buttonRow(string id, string rowFilter, string sort, string hide_columns, methodRow parentmethodRowBymethod_proteins_button) {
                proteins_buttonRow rowproteins_buttonRow = ((proteins_buttonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        rowFilter,
                        sort,
                        hide_columns,
                        null};
                if ((parentmethodRowBymethod_proteins_button != null)) {
                    columnValuesArray[4] = parentmethodRowBymethod_proteins_button[8];
                }
                rowproteins_buttonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproteins_buttonRow);
                return rowproteins_buttonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                proteins_buttonDataTable cln = ((proteins_buttonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new proteins_buttonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnrowFilter = base.Columns["rowFilter"];
                this.columnsort = base.Columns["sort"];
                this.columnhide_columns = base.Columns["hide_columns"];
                this.columnmethod_Id = base.Columns["method_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnrowFilter = new global::System.Data.DataColumn("rowFilter", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrowFilter);
                this.columnsort = new global::System.Data.DataColumn("sort", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsort);
                this.columnhide_columns = new global::System.Data.DataColumn("hide_columns", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnhide_columns);
                this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnmethod_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnrowFilter.Namespace = "";
                this.columnsort.Namespace = "";
                this.columnhide_columns.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRow Newproteins_buttonRow() {
                return ((proteins_buttonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new proteins_buttonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(proteins_buttonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.proteins_buttonRowChanged != null)) {
                    this.proteins_buttonRowChanged(this, new proteins_buttonRowChangeEvent(((proteins_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.proteins_buttonRowChanging != null)) {
                    this.proteins_buttonRowChanging(this, new proteins_buttonRowChangeEvent(((proteins_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.proteins_buttonRowDeleted != null)) {
                    this.proteins_buttonRowDeleted(this, new proteins_buttonRowChangeEvent(((proteins_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.proteins_buttonRowDeleting != null)) {
                    this.proteins_buttonRowDeleting(this, new proteins_buttonRowChangeEvent(((proteins_buttonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeproteins_buttonRow(proteins_buttonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Quanmethods ds = new Quanmethods();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "proteins_buttonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class methodRow : global::System.Data.DataRow {
            
            private methodDataTable tablemethod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal methodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemethod = ((methodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string method_id_key {
                get {
                    return ((string)(this[this.tablemethod.method_id_keyColumn]));
                }
                set {
                    this[this.tablemethod.method_id_keyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string method_id_name {
                get {
                    return ((string)(this[this.tablemethod.method_id_nameColumn]));
                }
                set {
                    this[this.tablemethod.method_id_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string associated_schema {
                get {
                    return ((string)(this[this.tablemethod.associated_schemaColumn]));
                }
                set {
                    this[this.tablemethod.associated_schemaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string aminoacids_file {
                get {
                    return ((string)(this[this.tablemethod.aminoacids_fileColumn]));
                }
                set {
                    this[this.tablemethod.aminoacids_fileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long expected_results {
                get {
                    return ((long)(this[this.tablemethod.expected_resultsColumn]));
                }
                set {
                    this[this.tablemethod.expected_resultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string q_spectrum {
                get {
                    return ((string)(this[this.tablemethod.q_spectrumColumn]));
                }
                set {
                    this[this.tablemethod.q_spectrumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string q_spectrum_position {
                get {
                    return ((string)(this[this.tablemethod.q_spectrum_positionColumn]));
                }
                set {
                    this[this.tablemethod.q_spectrum_positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string q_spectrum_type {
                get {
                    try {
                        return ((string)(this[this.tablemethod.q_spectrum_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'q_spectrum_type\' de la tabla \'method\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablemethod.q_spectrum_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    return ((int)(this[this.tablemethod.method_IdColumn]));
                }
                set {
                    this[this.tablemethod.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isq_spectrum_typeNull() {
                return this.IsNull(this.tablemethod.q_spectrum_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setq_spectrum_typeNull() {
                this[this.tablemethod.q_spectrum_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow[] GetMassTagsRows() {
                if ((this.Table.ChildRelations["method_MassTags"] == null)) {
                    return new MassTagsRow[0];
                }
                else {
                    return ((MassTagsRow[])(base.GetChildRows(this.Table.ChildRelations["method_MassTags"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow[] GetinstrumentRows() {
                if ((this.Table.ChildRelations["method_instrument"] == null)) {
                    return new instrumentRow[0];
                }
                else {
                    return ((instrumentRow[])(base.GetChildRows(this.Table.ChildRelations["method_instrument"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRow[] Getscans_buttonRows() {
                if ((this.Table.ChildRelations["method_scans_button"] == null)) {
                    return new scans_buttonRow[0];
                }
                else {
                    return ((scans_buttonRow[])(base.GetChildRows(this.Table.ChildRelations["method_scans_button"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRow[] Getpeptides_buttonRows() {
                if ((this.Table.ChildRelations["method_peptides_button"] == null)) {
                    return new peptides_buttonRow[0];
                }
                else {
                    return ((peptides_buttonRow[])(base.GetChildRows(this.Table.ChildRelations["method_peptides_button"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRow[] Getproteins_buttonRows() {
                if ((this.Table.ChildRelations["method_proteins_button"] == null)) {
                    return new proteins_buttonRow[0];
                }
                else {
                    return ((proteins_buttonRow[])(base.GetChildRows(this.Table.ChildRelations["method_proteins_button"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MassTagsRow : global::System.Data.DataRow {
            
            private MassTagsDataTable tableMassTags;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MassTagsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMassTags = ((MassTagsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MassTags_Id {
                get {
                    return ((int)(this[this.tableMassTags.MassTags_IdColumn]));
                }
                set {
                    this[this.tableMassTags.MassTags_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    try {
                        return ((int)(this[this.tableMassTags.method_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'method_Id\' de la tabla \'MassTags\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTags.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow methodRow {
                get {
                    return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_MassTags"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["method_MassTags"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismethod_IdNull() {
                return this.IsNull(this.tableMassTags.method_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmethod_IdNull() {
                this[this.tableMassTags.method_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRow[] GetMassTagRows() {
                if ((this.Table.ChildRelations["MassTags_MassTag"] == null)) {
                    return new MassTagRow[0];
                }
                else {
                    return ((MassTagRow[])(base.GetChildRows(this.Table.ChildRelations["MassTags_MassTag"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MassTagRow : global::System.Data.DataRow {
            
            private MassTagDataTable tableMassTag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MassTagRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMassTag = ((MassTagDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableMassTag.idColumn]));
                }
                set {
                    this[this.tableMassTag.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool reference {
                get {
                    try {
                        return ((bool)(this[this.tableMassTag.referenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'reference\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag.referenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Mass {
                get {
                    return ((double)(this[this.tableMassTag.MassColumn]));
                }
                set {
                    this[this.tableMassTag.MassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float _Corr_2 {
                get {
                    try {
                        return ((float)(this[this.tableMassTag._Corr_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Corr-2\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag._Corr_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float _Corr_1 {
                get {
                    try {
                        return ((float)(this[this.tableMassTag._Corr_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Corr-1\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag._Corr_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Corr1 {
                get {
                    try {
                        return ((float)(this[this.tableMassTag.Corr1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Corr1\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag.Corr1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Corr2 {
                get {
                    try {
                        return ((float)(this[this.tableMassTag.Corr2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Corr2\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag.Corr2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MassTags_Id {
                get {
                    try {
                        return ((int)(this[this.tableMassTag.MassTags_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'MassTags_Id\' de la tabla \'MassTag\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMassTag.MassTags_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow MassTagsRow {
                get {
                    return ((MassTagsRow)(this.GetParentRow(this.Table.ParentRelations["MassTags_MassTag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MassTags_MassTag"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferenceNull() {
                return this.IsNull(this.tableMassTag.referenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferenceNull() {
                this[this.tableMassTag.referenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Corr_2Null() {
                return this.IsNull(this.tableMassTag._Corr_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Corr_2Null() {
                this[this.tableMassTag._Corr_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Corr_1Null() {
                return this.IsNull(this.tableMassTag._Corr_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Corr_1Null() {
                this[this.tableMassTag._Corr_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorr1Null() {
                return this.IsNull(this.tableMassTag.Corr1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCorr1Null() {
                this[this.tableMassTag.Corr1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorr2Null() {
                return this.IsNull(this.tableMassTag.Corr2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCorr2Null() {
                this[this.tableMassTag.Corr2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMassTags_IdNull() {
                return this.IsNull(this.tableMassTag.MassTags_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMassTags_IdNull() {
                this[this.tableMassTag.MassTags_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class instrumentRow : global::System.Data.DataRow {
            
            private instrumentDataTable tableinstrument;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal instrumentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinstrument = ((instrumentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string instrument_id_key {
                get {
                    return ((string)(this[this.tableinstrument.instrument_id_keyColumn]));
                }
                set {
                    this[this.tableinstrument.instrument_id_keyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string instrument_id_name {
                get {
                    return ((string)(this[this.tableinstrument.instrument_id_nameColumn]));
                }
                set {
                    this[this.tableinstrument.instrument_id_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resolution {
                get {
                    return ((string)(this[this.tableinstrument.resolutionColumn]));
                }
                set {
                    this[this.tableinstrument.resolutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long kmax {
                get {
                    try {
                        return ((long)(this[this.tableinstrument.kmaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'kmax\' de la tabla \'instrument\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstrument.kmaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrument_Id {
                get {
                    return ((int)(this[this.tableinstrument.instrument_IdColumn]));
                }
                set {
                    this[this.tableinstrument.instrument_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    try {
                        return ((int)(this[this.tableinstrument.method_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'method_Id\' de la tabla \'instrument\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstrument.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow methodRow {
                get {
                    return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_instrument"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["method_instrument"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskmaxNull() {
                return this.IsNull(this.tableinstrument.kmaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkmaxNull() {
                this[this.tableinstrument.kmaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismethod_IdNull() {
                return this.IsNull(this.tableinstrument.method_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmethod_IdNull() {
                this[this.tableinstrument.method_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow[] GetinitialFitParamsRows() {
                if ((this.Table.ChildRelations["instrument_initialFitParams"] == null)) {
                    return new initialFitParamsRow[0];
                }
                else {
                    return ((initialFitParamsRow[])(base.GetChildRows(this.Table.ChildRelations["instrument_initialFitParams"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow[] GetdeltaFitParamsRows() {
                if ((this.Table.ChildRelations["instrument_deltaFitParams"] == null)) {
                    return new deltaFitParamsRow[0];
                }
                else {
                    return ((deltaFitParamsRow[])(base.GetChildRows(this.Table.ChildRelations["instrument_deltaFitParams"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class initialFitParamsRow : global::System.Data.DataRow {
            
            private initialFitParamsDataTable tableinitialFitParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal initialFitParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinitialFitParams = ((initialFitParamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int initialFitParams_Id {
                get {
                    return ((int)(this[this.tableinitialFitParams.initialFitParams_IdColumn]));
                }
                set {
                    this[this.tableinitialFitParams.initialFitParams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrument_Id {
                get {
                    try {
                        return ((int)(this[this.tableinitialFitParams.instrument_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'instrument_Id\' de la tabla \'initialFitParams\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableinitialFitParams.instrument_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow instrumentRow {
                get {
                    return ((instrumentRow)(this.GetParentRow(this.Table.ParentRelations["instrument_initialFitParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrument_initialFitParams"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinstrument_IdNull() {
                return this.IsNull(this.tableinitialFitParams.instrument_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinstrument_IdNull() {
                this[this.tableinitialFitParams.instrument_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRow[] Getif_parameterRows() {
                if ((this.Table.ChildRelations["initialFitParams_if_parameter"] == null)) {
                    return new if_parameterRow[0];
                }
                else {
                    return ((if_parameterRow[])(base.GetChildRows(this.Table.ChildRelations["initialFitParams_if_parameter"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class if_parameterRow : global::System.Data.DataRow {
            
            private if_parameterDataTable tableif_parameter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal if_parameterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableif_parameter = ((if_parameterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableif_parameter.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'id\' de la tabla \'if_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableif_parameter.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double value {
                get {
                    try {
                        return ((double)(this[this.tableif_parameter.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'value\' de la tabla \'if_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableif_parameter.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _string {
                get {
                    try {
                        return ((string)(this[this.tableif_parameter._stringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'string\' de la tabla \'if_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableif_parameter._stringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int initialFitParams_Id {
                get {
                    try {
                        return ((int)(this[this.tableif_parameter.initialFitParams_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'initialFitParams_Id\' de la tabla \'if_parameter\' es DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableif_parameter.initialFitParams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow initialFitParamsRow {
                get {
                    return ((initialFitParamsRow)(this.GetParentRow(this.Table.ParentRelations["initialFitParams_if_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["initialFitParams_if_parameter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableif_parameter.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableif_parameter.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableif_parameter.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableif_parameter.valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_stringNull() {
                return this.IsNull(this.tableif_parameter._stringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_stringNull() {
                this[this.tableif_parameter._stringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinitialFitParams_IdNull() {
                return this.IsNull(this.tableif_parameter.initialFitParams_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinitialFitParams_IdNull() {
                this[this.tableif_parameter.initialFitParams_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class deltaFitParamsRow : global::System.Data.DataRow {
            
            private deltaFitParamsDataTable tabledeltaFitParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal deltaFitParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledeltaFitParams = ((deltaFitParamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deltaFitParams_Id {
                get {
                    return ((int)(this[this.tabledeltaFitParams.deltaFitParams_IdColumn]));
                }
                set {
                    this[this.tabledeltaFitParams.deltaFitParams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int instrument_Id {
                get {
                    try {
                        return ((int)(this[this.tabledeltaFitParams.instrument_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'instrument_Id\' de la tabla \'deltaFitParams\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tabledeltaFitParams.instrument_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow instrumentRow {
                get {
                    return ((instrumentRow)(this.GetParentRow(this.Table.ParentRelations["instrument_deltaFitParams"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["instrument_deltaFitParams"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinstrument_IdNull() {
                return this.IsNull(this.tabledeltaFitParams.instrument_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinstrument_IdNull() {
                this[this.tabledeltaFitParams.instrument_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRow[] Getdf_parameterRows() {
                if ((this.Table.ChildRelations["deltaFitParams_df_parameter"] == null)) {
                    return new df_parameterRow[0];
                }
                else {
                    return ((df_parameterRow[])(base.GetChildRows(this.Table.ChildRelations["deltaFitParams_df_parameter"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class df_parameterRow : global::System.Data.DataRow {
            
            private df_parameterDataTable tabledf_parameter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal df_parameterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledf_parameter = ((df_parameterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tabledf_parameter.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'id\' de la tabla \'df_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tabledf_parameter.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double value {
                get {
                    try {
                        return ((double)(this[this.tabledf_parameter.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'value\' de la tabla \'df_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tabledf_parameter.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _string {
                get {
                    try {
                        return ((string)(this[this.tabledf_parameter._stringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'string\' de la tabla \'df_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tabledf_parameter._stringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int deltaFitParams_Id {
                get {
                    try {
                        return ((int)(this[this.tabledf_parameter.deltaFitParams_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'deltaFitParams_Id\' de la tabla \'df_parameter\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tabledf_parameter.deltaFitParams_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow deltaFitParamsRow {
                get {
                    return ((deltaFitParamsRow)(this.GetParentRow(this.Table.ParentRelations["deltaFitParams_df_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["deltaFitParams_df_parameter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tabledf_parameter.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tabledf_parameter.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tabledf_parameter.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tabledf_parameter.valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_stringNull() {
                return this.IsNull(this.tabledf_parameter._stringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_stringNull() {
                this[this.tabledf_parameter._stringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdeltaFitParams_IdNull() {
                return this.IsNull(this.tabledf_parameter.deltaFitParams_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdeltaFitParams_IdNull() {
                this[this.tabledf_parameter.deltaFitParams_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scans_buttonRow : global::System.Data.DataRow {
            
            private scans_buttonDataTable tablescans_button;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scans_buttonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescans_button = ((scans_buttonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablescans_button.idColumn]));
                }
                set {
                    this[this.tablescans_button.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rowFilter {
                get {
                    try {
                        return ((string)(this[this.tablescans_button.rowFilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'rowFilter\' de la tabla \'scans_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablescans_button.rowFilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tablescans_button.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'sort\' de la tabla \'scans_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablescans_button.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hide_columns {
                get {
                    try {
                        return ((string)(this[this.tablescans_button.hide_columnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'hide_columns\' de la tabla \'scans_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablescans_button.hide_columnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    try {
                        return ((int)(this[this.tablescans_button.method_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'method_Id\' de la tabla \'scans_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablescans_button.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow methodRow {
                get {
                    return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_scans_button"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["method_scans_button"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowFilterNull() {
                return this.IsNull(this.tablescans_button.rowFilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowFilterNull() {
                this[this.tablescans_button.rowFilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tablescans_button.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tablescans_button.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishide_columnsNull() {
                return this.IsNull(this.tablescans_button.hide_columnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethide_columnsNull() {
                this[this.tablescans_button.hide_columnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismethod_IdNull() {
                return this.IsNull(this.tablescans_button.method_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmethod_IdNull() {
                this[this.tablescans_button.method_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class peptides_buttonRow : global::System.Data.DataRow {
            
            private peptides_buttonDataTable tablepeptides_button;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal peptides_buttonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepeptides_button = ((peptides_buttonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablepeptides_button.idColumn]));
                }
                set {
                    this[this.tablepeptides_button.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rowFilter {
                get {
                    try {
                        return ((string)(this[this.tablepeptides_button.rowFilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'rowFilter\' de la tabla \'peptides_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablepeptides_button.rowFilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tablepeptides_button.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'sort\' de la tabla \'peptides_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablepeptides_button.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hide_columns {
                get {
                    try {
                        return ((string)(this[this.tablepeptides_button.hide_columnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'hide_columns\' de la tabla \'peptides_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablepeptides_button.hide_columnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    try {
                        return ((int)(this[this.tablepeptides_button.method_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'method_Id\' de la tabla \'peptides_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tablepeptides_button.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow methodRow {
                get {
                    return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_peptides_button"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["method_peptides_button"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowFilterNull() {
                return this.IsNull(this.tablepeptides_button.rowFilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowFilterNull() {
                this[this.tablepeptides_button.rowFilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tablepeptides_button.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tablepeptides_button.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishide_columnsNull() {
                return this.IsNull(this.tablepeptides_button.hide_columnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethide_columnsNull() {
                this[this.tablepeptides_button.hide_columnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismethod_IdNull() {
                return this.IsNull(this.tablepeptides_button.method_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmethod_IdNull() {
                this[this.tablepeptides_button.method_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class proteins_buttonRow : global::System.Data.DataRow {
            
            private proteins_buttonDataTable tableproteins_button;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal proteins_buttonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproteins_button = ((proteins_buttonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableproteins_button.idColumn]));
                }
                set {
                    this[this.tableproteins_button.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rowFilter {
                get {
                    try {
                        return ((string)(this[this.tableproteins_button.rowFilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'rowFilter\' de la tabla \'proteins_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableproteins_button.rowFilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sort {
                get {
                    try {
                        return ((string)(this[this.tableproteins_button.sortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'sort\' de la tabla \'proteins_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableproteins_button.sortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hide_columns {
                get {
                    try {
                        return ((string)(this[this.tableproteins_button.hide_columnsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'hide_columns\' de la tabla \'proteins_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableproteins_button.hide_columnsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int method_Id {
                get {
                    try {
                        return ((int)(this[this.tableproteins_button.method_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'method_Id\' de la tabla \'proteins_button\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableproteins_button.method_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow methodRow {
                get {
                    return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_proteins_button"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["method_proteins_button"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowFilterNull() {
                return this.IsNull(this.tableproteins_button.rowFilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowFilterNull() {
                this[this.tableproteins_button.rowFilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssortNull() {
                return this.IsNull(this.tableproteins_button.sortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsortNull() {
                this[this.tableproteins_button.sortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishide_columnsNull() {
                return this.IsNull(this.tableproteins_button.hide_columnsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethide_columnsNull() {
                this[this.tableproteins_button.hide_columnsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismethod_IdNull() {
                return this.IsNull(this.tableproteins_button.method_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmethod_IdNull() {
                this[this.tableproteins_button.method_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class methodRowChangeEvent : global::System.EventArgs {
            
            private methodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRowChangeEvent(methodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public methodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MassTagsRowChangeEvent : global::System.EventArgs {
            
            private MassTagsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRowChangeEvent(MassTagsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MassTagRowChangeEvent : global::System.EventArgs {
            
            private MassTagRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRowChangeEvent(MassTagRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MassTagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class instrumentRowChangeEvent : global::System.EventArgs {
            
            private instrumentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRowChangeEvent(instrumentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public instrumentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class initialFitParamsRowChangeEvent : global::System.EventArgs {
            
            private initialFitParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRowChangeEvent(initialFitParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public initialFitParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class if_parameterRowChangeEvent : global::System.EventArgs {
            
            private if_parameterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRowChangeEvent(if_parameterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public if_parameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class deltaFitParamsRowChangeEvent : global::System.EventArgs {
            
            private deltaFitParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRowChangeEvent(deltaFitParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public deltaFitParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class df_parameterRowChangeEvent : global::System.EventArgs {
            
            private df_parameterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRowChangeEvent(df_parameterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public df_parameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scans_buttonRowChangeEvent : global::System.EventArgs {
            
            private scans_buttonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRowChangeEvent(scans_buttonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scans_buttonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class peptides_buttonRowChangeEvent : global::System.EventArgs {
            
            private peptides_buttonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRowChangeEvent(peptides_buttonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public peptides_buttonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class proteins_buttonRowChangeEvent : global::System.EventArgs {
            
            private proteins_buttonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRowChangeEvent(proteins_buttonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public proteins_buttonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
